# t.party <- t(party) # party의 전치행렬
# t.party
Minju<-c(43.3,45.4,42.3,42.8,39.9,43.9,40.7,42.6,46.4,45.4,47.1,45.9)
People <- c(40.2, 38.6, 41.0, 42.5, 45.0, 42.2, 44.3, 41.5, 37.0, 37.9, 37.1, 37.0)
Justice <- c(4.0, 3.9, 3.6, 3.3, 3.3, 2.7, 2.8, 3.9, 3.7, 3.2, 3.1,3.7)
None <- c(10.9, 10.7, 11.6, 10.0, 10.1, 9.4, 10.0, 10.1, 11.3, 11.4, 11.0, 11.2)
party <-data.frame(Minju, People, Justice, None)
party
colnames(party)<-c("더불어민주당", "국민의힘", "정의당","무정당")
rownames(party) <- c('1월 3주', '1월 4주', '2월 1주', '2월 2주', '2월 3주', '2월 4주', '3월 1주', '3월 2주', '3월 3주', '3월 4주', '3월 5주', '4월 1주')
head(party)
tail(party)
mean(head(party$더불어민주당))
mean(tail(party$국민의힘))
mean.party<-c(mean(party$더불어민주당), mean(party$국민의힘),mean(party$정의당), mean(party$무정당)) # 각 정당의 기간 내 지지율 평균
mean.party
Minju.isBig <- which(Minju == (subset(party$더불어민주당, Minju >= mean.party[1])))
Minju.isBig
rownames(party)[Minju.isBig] # 전체 기간동안의 지지율 평균 이상 주차
People.isSmall <- which(People == (subset(party$국민의힘, People <= mean.party[2])))
People.isSmall
# rownames(party)
#Minju.isBig <- subset(party$더불어민주당, 더불어민주당 >= mean.party[1])
# t.party <- t(party) # party의 전치행렬
# t.party
Minju<-c(43.3,45.4,42.3,42.8,39.9,43.9,40.7,42.6,46.4,45.4,47.1,45.9)
People <- c(40.2, 38.6, 41.0, 42.5, 45.0, 42.2, 44.3, 41.5, 37.0, 37.9, 37.1, 37.0)
Justice <- c(4.0, 3.9, 3.6, 3.3, 3.3, 2.7, 2.8, 3.9, 3.7, 3.2, 3.1,3.7)
None <- c(10.9, 10.7, 11.6, 10.0, 10.1, 9.4, 10.0, 10.1, 11.3, 11.4, 11.0, 11.2)
party <-data.frame(Minju, People, Justice, None)
party
colnames(party)<-c("더불어민주당", "국민의힘", "정의당","무정당")
rownames(party) <- c('1월 3주', '1월 4주', '2월 1주', '2월 2주', '2월 3주', '2월 4주', '3월 1주', '3월 2주', '3월 3주', '3월 4주', '3월 5주', '4월 1주')
head(party)
tail(party)
mean(head(party$더불어민주당))
mean(tail(party$국민의힘))
mean.party<-c(mean(party$더불어민주당), mean(party$국민의힘),mean(party$정의당), mean(party$무정당)) # 각 정당의 기간 내 지지율 평균
mean.party
Minju.isBig <- which(Minju == (subset(party$더불어민주당, Minju >= mean.party[1])))
Minju.isBig
rownames(party)[Minju.isBig] # 전체 기간동안의 지지율 평균 이상 주차
People.isSmall <- which(People == (subset(party$국민의힘, People <= mean.party[2])))
People.isSmall
rownames(party)[People.isSmall]
# rownames(party)
#Minju.isBig <- subset(party$더불어민주당, 더불어민주당 >= mean.party[1])
# t.party <- t(party) # party의 전치행렬
# t.party
Minju<-c(43.3,45.4,42.3,42.8,39.9,43.9,40.7,42.6,46.4,45.4,47.1,45.9)
People <- c(40.2, 38.6, 41.0, 42.5, 45.0, 42.2, 44.3, 41.5, 37.0, 37.9, 37.1, 37.0)
Justice <- c(4.0, 3.9, 3.6, 3.3, 3.3, 2.7, 2.8, 3.9, 3.7, 3.2, 3.1,3.7)
None <- c(10.9, 10.7, 11.6, 10.0, 10.1, 9.4, 10.0, 10.1, 11.3, 11.4, 11.0, 11.2)
party <-data.frame(Minju, People, Justice, None)
party
colnames(party)<-c("더불어민주당", "국민의힘", "정의당","무정당")
rownames(party) <- c('1월 3주', '1월 4주', '2월 1주', '2월 2주', '2월 3주', '2월 4주', '3월 1주', '3월 2주', '3월 3주', '3월 4주', '3월 5주', '4월 1주')
head(party)
tail(party)
is.matrix(party)
is.data.frame(party)
mean(head(party$더불어민주당))
mean(tail(party$국민의힘))
mean.party<-c(mean(party$더불어민주당), mean(party$국민의힘),mean(party$정의당), mean(party$무정당)) # 각 정당의 기간 내 지지율 평균
mean.party
Minju.isBig <- which(Minju == (subset(party$더불어민주당, Minju >= mean.party[1])))
Minju.isBig
rownames(party)[Minju.isBig] # 더불어민주당에서 전체 기간동안의 지지율 평균 이상 주차
People.isSmall <- which(People == (subset(party$국민의힘, People <= mean.party[2])))
People.isSmall
rownames(party)[People.isSmall] # 국민의힘에서 전체 기간동안의 지지율 평균 이상 주차
# rownames(party)
#Minju.isBig <- subset(party$더불어민주당, 더불어민주당 >= mean.party[1])
# t.party <- t(party) # party의 전치행렬
# t.party
Minju<-c(43.3,45.4,42.3,42.8,39.9,43.9,40.7,42.6,46.4,45.4,47.1,45.9)
People <- c(40.2, 38.6, 41.0, 42.5, 45.0, 42.2, 44.3, 41.5, 37.0, 37.9, 37.1, 37.0)
Justice <- c(4.0, 3.9, 3.6, 3.3, 3.3, 2.7, 2.8, 3.9, 3.7, 3.2, 3.1,3.7)
None <- c(10.9, 10.7, 11.6, 10.0, 10.1, 9.4, 10.0, 10.1, 11.3, 11.4, 11.0, 11.2)
party <-data.frame(Minju, People, Justice, None)
party
is.matrix(party)
is.data.frame(party)
a<-as.matrix(party)
is.matrix(a)
colnames(party)<-c("더불어민주당", "국민의힘", "정의당","무정당")
rownames(party) <- c('1월 3주', '1월 4주', '2월 1주', '2월 2주', '2월 3주', '2월 4주', '3월 1주', '3월 2주', '3월 3주', '3월 4주', '3월 5주', '4월 1주')
head(party)
tail(party)
mean(head(party$더불어민주당))
mean(tail(party$국민의힘))
mean.party<-c(mean(party$더불어민주당), mean(party$국민의힘),mean(party$정의당), mean(party$무정당)) # 각 정당의 기간 내 지지율 평균
mean.party
Minju.isBig <- which(Minju == (subset(party$더불어민주당, Minju >= mean.party[1])))
Minju.isBig
rownames(party)[Minju.isBig] # 더불어민주당에서 전체 기간동안의 지지율 평균 이상 주차
People.isSmall <- which(People == (subset(party$국민의힘, People <= mean.party[2])))
People.isSmall
rownames(party)[People.isSmall] # 국민의힘에서 전체 기간동안의 지지율 평균 이상 주차
# rownames(party)
#Minju.isBig <- subset(party$더불어민주당, 더불어민주당 >= mean.party[1])
# t.party <- t(party) # party의 전치행렬
# t.party
# 2023년 1월 3주차 ~ 4월 1주차까지의 정당 지지도 주간 변화(단위: %)
Minju<-c(43.3,45.4,42.3,42.8,39.9,43.9,40.7,42.6,46.4,45.4,47.1,45.9) # 더불어민주당 지지율
People <- c(40.2, 38.6, 41.0, 42.5, 45.0, 42.2, 44.3, 41.5, 37.0, 37.9, 37.1, 37.0) # 국민의힘 지지율
Justice <- c(4.0, 3.9, 3.6, 3.3, 3.3, 2.7, 2.8, 3.9, 3.7, 3.2, 3.1,3.7) # 정의당 지지율
None <- c(10.9, 10.7, 11.6, 10.0, 10.1, 9.4, 10.0, 10.1, 11.3, 11.4, 11.0, 11.2) # 무정당 지지율
party <-data.frame(Minju, People, Justice, None) # 네 벡터를 하나의 데이터프레임으로 합치기
party
is.matrix(party) # party가 matrix인지 검사
is.data.frame(party) # party가 dataframe인지 검사
party.matrix <-as.matrix(party) # party를 matrix로 변환하여 party.matrix 생성
is.matrix(party.matrix) # party.matrix가 matrix인지 검사
colnames(party)<-c("더불어민주당", "국민의힘", "정의당","무정당") # 열에 당 이름 붙이기기
rownames(party) <- c('1월 3주', '1월 4주', '2월 1주', '2월 2주', '2월 3주', '2월 4주', '3월 1주', '3월 2주', '3월 3주', '3월 4주', '3월 5주', '4월 1주')
# 행에 주차 이름 붙이기
head(party) # party의 앞부분 5주차 추출
tail(party) # party의 뒷부분 5주차 추출
mean(head(party$더불어민주당)) # 더불어민주당의 앞부분 5주차 평균 지지율
mean(tail(party$국민의힘)) # 국민의힘의 뒷부분 5주차 평균 지지율율
mean.party<-c(mean(party$더불어민주당), mean(party$국민의힘),mean(party$정의당), mean(party$무정당)) # 각 정당의 기간 내 지지율 평균
Minju.isBig <- which(Minju == (subset(party$더불어민주당, Minju >= mean.party[1]))) # 더불어민주당의 평균 지지율보다 높았던 주차 인덱스 추출
Minju.isBig # 더불어민주당의 평균 지지율보다 높았던 주차 추출
rownames(party)[Minju.isBig] # 더불어민주당에서 전체 기간동안의 지지율 평균 이상 주차
People.isSmall <- which(People == (subset(party$국민의힘, People <= mean.party[2]))) # 국민의힘의 평균 지지율보다 낮았던 주차 인덱스 추출
People.isSmall # 국민의힘의 평균 지지율보다 낮았던 주차 추출출
rownames(party)[People.isSmall] # 국민의힘에서 전체 기간동안의 지지율 평균 이상 주차
t.party <- t(party) # party의 전치행렬
t.party
x <- 1
y <- (x<-3)+3
x <- 1
x
y <- (x<-3)+3
x
y
testfunc <- function(x, y=4, z=3){
result <- x - y + z
return(result)
}
testfunc(x=1, y=3)
testfunc(1, 3, 2)
testfunc(1)
installed.packages('rshape2')
getwd()
library(rshape2)
intall.packages('rshape2')
intall.packages('rshape2')
install.packages('rshape2')
library(rshape2)
install.packages("reshape2")
library(reshape2)
intall.packages('reshape2')
str(tips)
levels(tips$sex)
getwd()
getwd()
getwd()
setwd('C:\\Users\\김수빈\\zzangsbin97main\\문서\\학교\\2024 1학기\\확률과통계\\R겠습니다\\R-\\7주차')
get()
getwd()
getwd()
getwd()
getwd()
rsf <- read.csv('이산가족상봉.csv', header = T,  fileEncoding="euc-kr")
rsf
getwd()
setwd('C:\\Users\\김수빈\\zzangsbin97main\\문서\\학교\\2024 1학기\\확률과통계\\R겠습니다\\R-\\7주차')
# a reunion of separated families => rsf로 축약
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
class(rsf)
rsf
rsf
rownames(rsf)
rsf <- read.csv('이산가족교류.csv', header = F,  fileEncoding="euc-kr")
class(rsf)
rownames(rsf)
levels(rsf)
level(rsf)
colnames(rsf)
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
class(rsf)
colnames(rsf)
rownames(rsf)
str(rsf)
for ( i in 2:8 ){
as.integer(rsf[i][3:22])
}
str(rsf)
for ( i in 2:8 ){
as.integer(rsf[i][3:21])
}
for ( i in 2:8 ){
rsf[i][3:21]
}
rsf[2]
rsf[2][2]
rsf[2, 2]
for ( i in 2:8 ){
rsf[i, 3:21]
}
for ( i in 2:8 ){
rsf[i, 3:20]
}
for ( i in 2:8 ){
rsf[i, 3:20]
}
for ( i in 2:8 ){
rsf[i, 3]
}
for ( i in 2:5 ){
rsf[i, 3]
}
for ( i in 2:5 ){
rsf[i]
}
str(rsf)
for ( i in 2:5 ){
print(rsf[i])
}
for ( i in 2:5 ){
i
}
for ( i in 2:5 ){
print(rsf[i, 3:21])
}
for ( i in 2:21 ){
print(rsf[i, 3:7])
}
rsf <- read.csv('이산가족교류.csv', header = F,  fileEncoding="euc-kr")
for ( i in 2:21 ){
print(rsf[i, 3:7])
}
for ( i in 2:21 ){
print(rsf[i, 3:7])
}
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
for ( i in 2:21 ){
print(rsf[i, 3:7])
}
for ( i in 2:21 ){
print(rsf[i, 2:8])
}
for ( i in 2:21 ){
as.integer(rsf[i, 2:8])
}
class(rsf[3, 3])
class(rsf[9, 9])
class(rsf[9, 3])
class(rsf[9, 2])
rsf[9, 2]
for ( i in 2:21 ){
rsf[i, 2:8] <- as.integer(rsf[i, 2:8])
}
rsf[9, 2]
for ( i in 2:21 ){
for ( j in 2:8){
rsf[i, j] <- as.integer(rsf[i, j])
}
}
rsf[9, 2]
rsf[9, 2] + rsf[9, 3]
for ( i in 2:21 ){
for ( j in 2:8){
rsf[i, j] <- as.numeric(rsf[i, j])
}
}
rsf[9, 2] + rsf[9, 3]
for (i in 2:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf[9, 2] + rsf[9, 3]
rsf
for (i in 3:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
for (i in 3:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
for (i in 4:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
for (i in 2:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
for (i in 3:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
for (i in 3:21) {
for (j in 2:8) {
rsf[, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[, j]))
}
}
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
for ( i in 2:8){
which(max(rsf[, i]))
}
for ( i in 2:8){
which.max(rsf[, i])
}
for ( i in 2:8){
which.max(rsf[3:21, i])
}
for ( i in 2:8){
names(which.max(rsf[3:21, i]))
}
for ( i in 2:8){
print(names(which.max(rsf[3:21, i])))
}
for ( i in 2:8){
class(names(which.max(rsf[3:21, i])))
}
for ( i in 2:8){
print(class(names(which.max(rsf[3:21, i]))))
}
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf[3:21, 2:8]
colnames(rsf)
rownames(rsf)
mingan <- subset(rsf, 민간차원 == '생사확인')
mingan
mingan <- subset(rsf, 민간차원 == '생사확인')
mingan
mingan <- subset(rsf, row = 3:21, 민간차원 == '생사확인')
mingan
rsf[, c(2, )]
colnames(rsf)[1]
colnames(rsf)[2]
colnames(rsf)[2, 3:21]
mingan <- subset(rsf, rsf[2,2] == '생사확인')
rsf <- t(rsf)
rsf
rsf <- t(rsf)
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf <- t(rsf)
for (i in 2:8) {
for (j in 3:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf <- t(rsf)
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf <- t(rsf)
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
rsf <- t(rsf)
for (i in 1:8) {
for (j in 2:21) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf[3:21, 2:8
rsf[3:21, 2:8]
rsf[1:8, 2:21]
as.numeric(rsf[1:8, 2:21])
rsf
as.numeric(gsub("[^0-9.-]", "", rsf[1:8, 2:21])
rsf
as.numeric(gsub("[^0-9.-]", "", rsf[1:8, 2:21]))
rsf
rsf[1:8, 2:21] <- as.numeric(gsub("[^0-9.-]", "", rsf[1:8, 2:21]))
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
rsf
rsf[4][4]
rsf[4, 4]
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf[4, 4]
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
for (i in 3:21) {
for (j in 2:8) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf
rsf <- rsf[-1, -1]
rsf
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
rsf <- read.csv('이산가족교류.csv', header = T,  fileEncoding="euc-kr")
rsf
rsf[1, ]
row.names <- c(rsf[ ,1])
col.names <- c(rsf[1, ])
row.names
col.names
rsf <- rsf[-1, -1]
rsf
rownames(rsf) <- row.names
rownames(rsf) <- row.names[-1]
colnames(rsf) <- col.names[-1]
rsf
rownames(rsf) <- row.names
rsf[4, 4]
for (i in 1:) {
for (i in 1:20) {
for (j in 1:7) {
rsf[i, j] <- as.numeric(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
rsf[4, 4]
rsf[4, 4]+rsf[4, 5]
for (i in 1:20) {
for (j in 1:7) {
rsf[i, j] <- as.numeric(rsf[i, j])
}
}
rsf[4, 4]+rsf[4, 5]
for (i in 1:20) {
for (j in 1:7) {
rsf[i, j] <- as.numeric(rsf[i, j])
}
}
rsf
rsf[4, 4]+rsf[4, 5]
class(rsf[4, 4])
for (i in 1:20) {
for (j in 1:7) {
rsf[i, j] <- as.integer(gsub("[^0-9.-]", "", rsf[i, j]))
}
}
class(rsf[4, 4])
for (i in 1:20) {
for (j in 1:7) {
rsf[i, j] <- as.integer(rsf[i, j])
}
}
class(rsf[4, 4])
